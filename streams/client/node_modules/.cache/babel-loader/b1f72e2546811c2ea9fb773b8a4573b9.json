{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\danie\\\\Desktop\\\\React\\\\streams\\\\client\\\\src\\\\components\\\\streams\\\\StreamCreate.js\";\nimport React from 'react';\nimport { Field, reduxForm } from 'redux-form';\nimport { connect } from 'react-redux';\nimport { createStream } from '../../actions';\n\nclass StreamCreate extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.renderInput = ({\n      input,\n      label,\n      meta\n    }) => {\n      const className = \"field \".concat(meta.error && meta.touched ? 'error' : '');\n      return React.createElement(\"div\", {\n        className: className,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 10\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 11\n        },\n        __self: this\n      }, label), React.createElement(\"input\", Object.assign({\n        autoComplete: \"off\"\n      }, input, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 12\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 13\n        },\n        __self: this\n      }, this.renderError(meta)));\n    };\n  }\n\n  renderError({\n    error,\n    touched\n  }) {\n    if (touched && error) {\n      return React.createElement(\"div\", {\n        className: \"ui error message\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 22\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 23\n        },\n        __self: this\n      }, error));\n    }\n  }\n\n  onSubmit(formValues) {}\n\n  render() {\n    return React.createElement(\"form\", {\n      onSubmit: this.props.handleSubmit(this.onSubmit),\n      className: \"ui form error\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    }, React.createElement(Field, {\n      name: \"title\",\n      component: this.renderInput,\n      label: \"Enter Title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    }), React.createElement(Field, {\n      name: \"description\",\n      component: this.renderInput,\n      label: \"Enter Description\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      className: \"ui button primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }, \"Submit\"));\n  }\n\n}\n\nconst validate = formValues => {\n  const errors = {};\n\n  if (!formValues.title) {\n    errors.title = 'You need to enter a title';\n  }\n\n  if (!formValues.description) {\n    errors.description = 'Yo must enter a description';\n  }\n\n  return errors;\n};\n\nexport default reduxForm({\n  form: 'streamCreate',\n  validate\n})(StreamCreate);","map":{"version":3,"sources":["C:\\Users\\danie\\Desktop\\React\\streams\\client\\src\\components\\streams\\StreamCreate.js"],"names":["React","Field","reduxForm","connect","createStream","StreamCreate","Component","renderInput","input","label","meta","className","error","touched","renderError","onSubmit","formValues","render","props","handleSubmit","validate","errors","title","description","form"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,KAAR,EAAeC,SAAf,QAA+B,YAA/B;AACA,SAAQC,OAAR,QAAsB,aAAtB;AACA,SAAQC,YAAR,QAA2B,eAA3B;;AAEA,MAAMC,YAAN,SAA2BL,KAAK,CAACM,SAAjC,CAA2C;AAAA;AAAA;;AAAA,SACvCC,WADuC,GACzB,CAAC;AAACC,MAAAA,KAAD;AAAQC,MAAAA,KAAR;AAAeC,MAAAA;AAAf,KAAD,KAA0B;AACpC,YAAMC,SAAS,mBAAYD,IAAI,CAACE,KAAL,IAAcF,IAAI,CAACG,OAAnB,GAA6B,OAA7B,GAAuC,EAAnD,CAAf;AACA,aACI;AAAK,QAAA,SAAS,EAAEF,SAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAQF,KAAR,CADJ,EAEI;AAAO,QAAA,YAAY,EAAC;AAApB,SAA8BD,KAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAFJ,EAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAM,KAAKM,WAAL,CAAiBJ,IAAjB,CAAN,CAHJ,CADJ;AAQH,KAXsC;AAAA;;AAavCI,EAAAA,WAAW,CAAE;AAACF,IAAAA,KAAD;AAAQC,IAAAA;AAAR,GAAF,EAAoB;AAC3B,QAAGA,OAAO,IAAID,KAAd,EAAoB;AAChB,aACI;AAAK,QAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAK,QAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAyBA,KAAzB,CADJ,CADJ;AAKH;AACJ;;AAEDG,EAAAA,QAAQ,CAACC,UAAD,EAAY,CACnB;;AAEDC,EAAAA,MAAM,GAAE;AACJ,WACI;AAAM,MAAA,QAAQ,EAAE,KAAKC,KAAL,CAAWC,YAAX,CAAwB,KAAKJ,QAA7B,CAAhB;AAAwD,MAAA,SAAS,EAAC,eAAlE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAC,OAAZ;AAAoB,MAAA,SAAS,EAAE,KAAKR,WAApC;AAAiD,MAAA,KAAK,EAAC,aAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAEI,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAC,aAAZ;AAA0B,MAAA,SAAS,EAAE,KAAKA,WAA1C;AAAuD,MAAA,KAAK,EAAC,mBAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,EAGI;AAAQ,MAAA,SAAS,EAAC,mBAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHJ,CADJ;AAOH;;AAlCsC;;AAqC3C,MAAMa,QAAQ,GAAIJ,UAAD,IAAgB;AAC7B,QAAMK,MAAM,GAAG,EAAf;;AACA,MAAG,CAACL,UAAU,CAACM,KAAf,EAAqB;AACjBD,IAAAA,MAAM,CAACC,KAAP,GAAe,2BAAf;AACH;;AACD,MAAG,CAACN,UAAU,CAACO,WAAf,EAA2B;AACvBF,IAAAA,MAAM,CAACE,WAAP,GAAqB,6BAArB;AACH;;AACD,SAAOF,MAAP;AACH,CATD;;AAWA,eAAenB,SAAS,CAAC;AAACsB,EAAAA,IAAI,EAAE,cAAP;AAAuBJ,EAAAA;AAAvB,CAAD,CAAT,CAA4Cf,YAA5C,CAAf","sourcesContent":["import React from 'react';\r\nimport {Field, reduxForm} from 'redux-form';\r\nimport {connect} from 'react-redux';\r\nimport {createStream} from '../../actions'\r\n\r\nclass StreamCreate extends React.Component {\r\n    renderInput = ({input, label, meta}) => {\r\n        const className = `field ${meta.error && meta.touched ? 'error' : ''}`\r\n        return (\r\n            <div className={className}>\r\n                <label>{label}</label>\r\n                <input autoComplete=\"off\" {...input}/>\r\n                <div>{this.renderError(meta)}</div> \r\n            </div>\r\n\r\n        );\r\n    }\r\n\r\n    renderError ({error, touched}) {\r\n        if(touched && error){\r\n            return(\r\n                <div className=\"ui error message\">\r\n                    <div className=\"header\">{error}</div>\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n\r\n    onSubmit(formValues){\r\n    }\r\n    \r\n    render(){\r\n        return (\r\n            <form onSubmit={this.props.handleSubmit(this.onSubmit)} className=\"ui form error\">\r\n                <Field name=\"title\" component={this.renderInput} label=\"Enter Title\"/>\r\n                <Field name=\"description\" component={this.renderInput} label=\"Enter Description\"/>\r\n                <button className=\"ui button primary\">Submit</button>\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nconst validate = (formValues) => {\r\n    const errors = {}\r\n    if(!formValues.title){\r\n        errors.title = 'You need to enter a title'\r\n    }\r\n    if(!formValues.description){\r\n        errors.description = 'Yo must enter a description'\r\n    }\r\n    return errors;\r\n}\r\n\r\nexport default reduxForm({form: 'streamCreate', validate})(StreamCreate);"]},"metadata":{},"sourceType":"module"}