{"ast":null,"code":"var _jsxFileName = \"d:\\\\Dokument\\\\Programmering\\\\React-course\\\\streams\\\\client\\\\src\\\\components\\\\streams\\\\StreamShow.js\";\nimport React from 'react';\nimport flv from 'flv.js';\nimport { connect } from 'react-redux';\nimport { fetchStream } from '../../actions';\n\nclass StreamShow extends React.Component {\n  constructor(props) {\n    super(props);\n    this.videoRef = React.createRef();\n  }\n\n  componentDidMount() {\n    const id = this.props.match.params.id.id;\n    this.props.fetchStream(this.props.match.params.id);\n    flv.createPlayer({\n      type: 'flv',\n      url: \"http://localhost:8000/\".concat(id)\n    });\n  }\n\n  render() {\n    if (!this.props.stream) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 21\n        },\n        __self: this\n      }, \"Loading\");\n    }\n\n    const _this$props$stream = this.props.stream,\n          title = _this$props$stream.title,\n          description = _this$props$stream.description;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27\n      },\n      __self: this\n    }, React.createElement(\"video\", {\n      ref: this.videoRef,\n      style: {\n        width: '100%'\n      },\n      controls: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29\n      },\n      __self: this\n    }), React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30\n      },\n      __self: this\n    }, title), React.createElement(\"h5\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31\n      },\n      __self: this\n    }, description));\n  }\n\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    stream: state.streams[ownProps.match.params.id]\n  };\n};\n\nexport default connect(mapStateToProps, {\n  fetchStream\n})(StreamShow);","map":{"version":3,"sources":["d:\\Dokument\\Programmering\\React-course\\streams\\client\\src\\components\\streams\\StreamShow.js"],"names":["React","flv","connect","fetchStream","StreamShow","Component","constructor","props","videoRef","createRef","componentDidMount","id","match","params","createPlayer","type","url","render","stream","title","description","width","mapStateToProps","state","ownProps","streams"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,GAAP,MAAgB,QAAhB;AACA,SAAQC,OAAR,QAAsB,aAAtB;AACA,SAASC,WAAT,QAA4B,eAA5B;;AAEA,MAAMC,UAAN,SAAyBJ,KAAK,CAACK,SAA/B,CAAyC;AACrCC,EAAAA,WAAW,CAACC,KAAD,EAAO;AACd,UAAMA,KAAN;AACA,SAAKC,QAAL,GAAgBR,KAAK,CAACS,SAAN,EAAhB;AACH;;AACDC,EAAAA,iBAAiB,GAAE;AAAA,UACPC,EADO,GACA,KAAKJ,KAAL,CAAWK,KAAX,CAAiBC,MAAjB,CAAwBF,EADxB,CACPA,EADO;AAEf,SAAKJ,KAAL,CAAWJ,WAAX,CAAuB,KAAKI,KAAL,CAAWK,KAAX,CAAiBC,MAAjB,CAAwBF,EAA/C;AACAV,IAAAA,GAAG,CAACa,YAAJ,CAAiB;AACbC,MAAAA,IAAI,EAAE,KADO;AAEbC,MAAAA,GAAG,kCAA2BL,EAA3B;AAFU,KAAjB;AAIH;;AACDM,EAAAA,MAAM,GAAE;AACJ,QAAG,CAAC,KAAKV,KAAL,CAAWW,MAAf,EAAsB;AAClB,aAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAP;AACH;;AAHG,+BAKyB,KAAKX,KAAL,CAAWW,MALpC;AAAA,UAKGC,KALH,sBAKGA,KALH;AAAA,UAKUC,WALV,sBAKUA,WALV;AAOJ,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEI;AAAO,MAAA,GAAG,EAAE,KAAKZ,QAAjB;AAA2B,MAAA,KAAK,EAAE;AAACa,QAAAA,KAAK,EAAE;AAAR,OAAlC;AAAmD,MAAA,QAAQ,EAAE,IAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,EAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKF,KAAL,CAHJ,EAII;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKC,WAAL,CAJJ,CADJ;AAQH;;AA5BoC;;AA+BzC,MAAME,eAAe,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB;AACzC,SAAO;AAACN,IAAAA,MAAM,EAAEK,KAAK,CAACE,OAAN,CAAcD,QAAQ,CAACZ,KAAT,CAAeC,MAAf,CAAsBF,EAApC;AAAT,GAAP;AACH,CAFD;;AAIA,eAAeT,OAAO,CAACoB,eAAD,EAAkB;AAACnB,EAAAA;AAAD,CAAlB,CAAP,CAAwCC,UAAxC,CAAf","sourcesContent":["import React from 'react';\r\nimport flv from 'flv.js';\r\nimport {connect} from 'react-redux';\r\nimport { fetchStream } from '../../actions';\r\n\r\nclass StreamShow extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.videoRef = React.createRef();\r\n    }\r\n    componentDidMount(){\r\n        const { id } = this.props.match.params.id\r\n        this.props.fetchStream(this.props.match.params.id);\r\n        flv.createPlayer({\r\n            type: 'flv',\r\n            url: `http://localhost:8000/${id}`\r\n        });\r\n    }\r\n    render(){\r\n        if(!this.props.stream){\r\n            return <div>Loading</div>;\r\n        }\r\n\r\n        const {title, description} = this.props.stream;\r\n        \r\n        return (\r\n            <div>\r\n\r\n                <video ref={this.videoRef} style={{width: '100%'}} controls={true} />\r\n                <h1>{title}</h1>\r\n                <h5>{description}</h5>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {stream: state.streams[ownProps.match.params.id]}\r\n};\r\n   \r\nexport default connect(mapStateToProps, {fetchStream})(StreamShow);"]},"metadata":{},"sourceType":"module"}