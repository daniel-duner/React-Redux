{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\danie\\\\Desktop\\\\React\\\\streams\\\\client\\\\src\\\\components\\\\streams\\\\StreamList.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { fetchStreams } from '../../actions';\n\nclass StreamList extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.renderAdmin = stream => {\n      if (stream.userId === this.props.currentUserId) {\n        return React.createElement(\"div\", {\n          className: \"right floated content\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 14\n          },\n          __self: this\n        }, React.createElement(\"button\", {\n          className: \"ui button primary\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 15\n          },\n          __self: this\n        }, \"Edit\"), React.createElement(\"button\", {\n          className: \"ui button negative\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 18\n          },\n          __self: this\n        }, \"Delete\"));\n      }\n    };\n  }\n\n  componentDidMount() {\n    this.props.fetchStreams();\n  }\n\n  renderList() {\n    return this.props.streams.map(stream => {\n      return React.createElement(\"div\", {\n        className: \"item\",\n        key: stream.id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 29\n        },\n        __self: this\n      }, React.createElement(\"i\", {\n        className: \"large middle aligned icon camera\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31\n        },\n        __self: this\n      }, stream.title, React.createElement(\"div\", {\n        className: \"description\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33\n        },\n        __self: this\n      }, stream.description)), this.renderAdmin(stream));\n    });\n  }\n\n  renderCreate() {\n    console.log(this.props.isSignedIn);\n\n    if (this.props.isSignedIn) {\n      return React.createElement(\"div\", {\n        style: {\n          textAlign: 'right'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47\n        },\n        __self: this\n      }, React.createElement(Link, {\n        to: \"/streams/new\",\n        className: \"ui button primary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      }, \"Create Stream\"));\n    }\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, \"Streams\"), React.createElement(\"div\", {\n      className: \"ui celled list\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, this.renderList()), this.renderCreate());\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    streams: Object.values(state.streams),\n    currentUserId: state.auth.userId,\n    isSignedIn: state.auth.isSignedIn\n  };\n};\n\nexport default connect(mapStateToProps, {\n  fetchStreams\n})(StreamList);","map":{"version":3,"sources":["C:\\Users\\danie\\Desktop\\React\\streams\\client\\src\\components\\streams\\StreamList.js"],"names":["React","connect","Link","fetchStreams","StreamList","Component","renderAdmin","stream","userId","props","currentUserId","componentDidMount","renderList","streams","map","id","title","description","renderCreate","console","log","isSignedIn","textAlign","render","mapStateToProps","state","Object","values","auth"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,OAAR,QAAsB,aAAtB;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,SAAQC,YAAR,QAA2B,eAA3B;;AAEA,MAAMC,UAAN,SAAyBJ,KAAK,CAACK,SAA/B,CAAyC;AAAA;AAAA;;AAAA,SAKrCC,WALqC,GAKvBC,MAAM,IAAI;AACpB,UAAGA,MAAM,CAACC,MAAP,KAAkB,KAAKC,KAAL,CAAWC,aAAhC,EAA8C;AAC1C,eACI;AAAK,UAAA,SAAS,EAAC,uBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACI;AAAQ,UAAA,SAAS,EAAC,mBAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,EAII;AAAQ,UAAA,SAAS,EAAC,oBAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAJJ,CADJ;AAUH;AACJ,KAlBoC;AAAA;;AACrCC,EAAAA,iBAAiB,GAAE;AACf,SAAKF,KAAL,CAAWN,YAAX;AACH;;AAiBDS,EAAAA,UAAU,GAAE;AACR,WAAO,KAAKH,KAAL,CAAWI,OAAX,CAAmBC,GAAnB,CAAuBP,MAAM,IAAG;AACnC,aACI;AAAK,QAAA,SAAS,EAAC,MAAf;AAAsB,QAAA,GAAG,EAAEA,MAAM,CAACQ,EAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAG,QAAA,SAAS,EAAC,kCAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,EAEI;AAAK,QAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACKR,MAAM,CAACS,KADZ,EAEI;AAAK,QAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACCT,MAAM,CAACU,WADR,CAFJ,CAFJ,EAQK,KAAKX,WAAL,CAAiBC,MAAjB,CARL,CADJ;AAYH,KAbM,CAAP;AAcH;;AAEDW,EAAAA,YAAY,GAAE;AACVC,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKX,KAAL,CAAWY,UAAvB;;AACA,QAAG,KAAKZ,KAAL,CAAWY,UAAd,EAAyB;AACrB,aACI;AAAK,QAAA,KAAK,EAAE;AAACC,UAAAA,SAAS,EAAE;AAAZ,SAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,IAAD;AAAM,QAAA,EAAE,EAAC,cAAT;AAAwB,QAAA,SAAS,EAAC,mBAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBADJ,CADJ;AAOH;AACJ;;AAEDC,EAAAA,MAAM,GAAE;AACJ,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADJ,EAEI;AAAK,MAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAiC,KAAKX,UAAL,EAAjC,CAFJ,EAGK,KAAKM,YAAL,EAHL,CADJ;AAOH;;AA1DoC;;AA6DzC,MAAMM,eAAe,GAAIC,KAAD,IAAW;AAC/B,SAAQ;AACJZ,IAAAA,OAAO,EAAEa,MAAM,CAACC,MAAP,CAAcF,KAAK,CAACZ,OAApB,CADL;AAEJH,IAAAA,aAAa,EAAEe,KAAK,CAACG,IAAN,CAAWpB,MAFtB;AAGJa,IAAAA,UAAU,EAAEI,KAAK,CAACG,IAAN,CAAWP;AAHnB,GAAR;AAMH,CAPD;;AASA,eAAepB,OAAO,CAACuB,eAAD,EAAkB;AAACrB,EAAAA;AAAD,CAAlB,CAAP,CAAyCC,UAAzC,CAAf","sourcesContent":["import React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\nimport {fetchStreams} from '../../actions';\r\n\r\nclass StreamList extends React.Component {\r\n    componentDidMount(){\r\n        this.props.fetchStreams();\r\n    }\r\n\r\n    renderAdmin = stream => {\r\n        if(stream.userId === this.props.currentUserId){\r\n            return (\r\n                <div className=\"right floated content\">\r\n                    <button className=\"ui button primary\">\r\n                        Edit\r\n                    </button>\r\n                    <button className=\"ui button negative\">\r\n                        Delete\r\n                    </button>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n\r\n    renderList(){\r\n        return this.props.streams.map(stream =>{\r\n            return(\r\n                <div className=\"item\" key={stream.id}>\r\n                    <i className=\"large middle aligned icon camera\"/>   \r\n                    <div className=\"content\">\r\n                        {stream.title}\r\n                        <div className=\"description\">\r\n                        {stream.description}\r\n                        </div>\r\n                    </div>\r\n                    {this.renderAdmin(stream)}\r\n                </div>\r\n            ); \r\n        });\r\n    }\r\n\r\n    renderCreate(){\r\n        console.log(this.props.isSignedIn)\r\n        if(this.props.isSignedIn){\r\n            return(\r\n                <div style={{textAlign: 'right'}}>\r\n                    <Link to=\"/streams/new\" className=\"ui button primary\">\r\n                    Create Stream\r\n                    </Link>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div>\r\n                <h2>Streams</h2>\r\n                <div className=\"ui celled list\">{this.renderList()}</div>\r\n                {this.renderCreate()}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return ({\r\n        streams: Object.values(state.streams),\r\n        currentUserId: state.auth.userId,\r\n        isSignedIn: state.auth.isSignedIn\r\n    });\r\n\r\n};\r\n\r\nexport default connect(mapStateToProps, {fetchStreams})(StreamList);"]},"metadata":{},"sourceType":"module"}